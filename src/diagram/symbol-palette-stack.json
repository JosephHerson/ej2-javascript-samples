{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/symbol-palette/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/24.1.41/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/24.1.41/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-8 control-section\">\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"symbolpalette\"></div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <table id=\"property\" title=\"Properties\">\n        <tbody><tr>\n            <td>\n                <div>Expandable: </div>\n            </td>\n            <td>\n                <select id=\"expand\">\n                    <option value=\"Single\">Single</option>\n                    <option value=\"Multiple\">Multiple</option>\n                </select>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>Symbol Size: </div>\n            </td>\n            <td>\n                <input type=\"text\" id=\"size\">\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>Animation: </div>\n            </td>\n            <td>\n                <input type=\"checkbox\" id=\"animation\" unchecked=\"false\">\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>Item Text: </div>\n            </td>\n            <td>\n                <input type=\"checkbox\" id=\"itemtext\" unchecked=\"false\">\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>Header Icon: </div>\n            </td>\n            <td>\n                <input type=\"checkbox\" id=\"headericon\" unchecked=\"false\">\n            </td>\n        </tr>\n    </tbody></table>\n</div>\n\n</div></body></html>","index.js":"{{ripple}}/**\n * Default symbol palette sample\n */\nej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo);\n//enable or disable the header icon for Symbol palette.\nvar palette;\nvar animation;\nvar expand;\nvar size;\nvar headericon;\nvar itemtext;\nfunction onHeaderIconChange(args) {\n    for (var i = 0; i < palette.palettes.length; i++) {\n        if (args.checked) {\n            if (i === 0) {\n                palette.palettes[i].iconCss = 'e-ddb-icons e-basic';\n            } else if (i === 1) {\n                palette.palettes[i].iconCss = 'e-ddb-icons e-flow';\n            } else if (i === 2) {\n                palette.palettes[i].iconCss = 'e-ddb-icons e-connector';\n            }\n        } else {\n            palette.palettes[i].iconCss = '';\n        }\n    }\n}\n\nfunction onAnimationChange(args) {\n    palette.enableAnimation = args.checked;\n}\n\nfunction onItemTextChange(args) {\n    if (args.checked) {\n        palette.getSymbolInfo = function (symbol) {\n            if (symbol.text !== undefined) {\n                return { description: { text: symbol.text, overflow: 'Wrap' } };\n            }\n            return { description: { text: symbol.id } };\n        };\n    }\n    else {\n        palette.getSymbolInfo = function (symbol) {\n            return { description: { text: '' } };\n        };\n    }\n    palette.dataBind();\n}\n\n    //Initialize the flowshapes for the symbol palatte\n    var flowshapes = [\n        { id: 'terminator', shape: { type: 'Flow', shape: 'Terminator' } },\n        { id: 'process', shape: { type: 'Flow', shape: 'Process' } },\n        { id: 'sort', shape: { type: 'Flow', shape: 'Sort' } },\n        { id: 'document', shape: { type: 'Flow', shape: 'Document' } },\n        { id: 'predefinedprocess', shape: { type: 'Flow', shape: 'PreDefinedProcess' } },\n        { id: 'papertap', shape: { type: 'Flow', shape: 'PaperTap' } },\n        { id: 'directdata', shape: { type: 'Flow', shape: 'DirectData' } },\n        { id: 'sequentialdata', shape: { type: 'Flow', shape: 'SequentialData' } },\n    ];\n    var basicShapes = [\n        { id: 'Rectangle', shape: { type: 'Basic', shape: 'Rectangle' } },\n        { id: 'Ellipse', shape: { type: 'Basic', shape: 'Ellipse' } },\n        { id: 'Parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' } },\n        { id: 'Triangle', shape: { type: 'Basic', shape: 'Triangle' } },\n        { id: 'Hexagon', shape: { type: 'Basic', shape: 'Hexagon' } },\n        { id: 'Pentagon', shape: { type: 'Basic', shape: 'Pentagon' } },\n        { id: 'Cylinder', shape: { type: 'Basic', shape: 'Cylinder' } },\n        { id: 'Star', shape: { type: 'Basic', shape: 'Star' } }\n    ];\n    //Initializes connector symbols for the symbol palette\n    var connectorSymbols = [\n        {\n            id: 'Link1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            targetDecorator: {  style:{ fill: '#757575', strokeColor: '#757575'}, shape: 'Arrow' }, style: { strokeWidth: 2, strokeColor: '#757575' }\n        },\n        {\n            id: 'link3', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            targetDecorator: { shape: 'None' }, style: { strokeColor: '#757575', strokeWidth: 2 },\n        },\n        {\n            id: 'Link21', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            targetDecorator: { shape: 'Arrow', style:{strokeColor: '#757575', fill: '#757575'} }, style: { strokeWidth: 2, strokeColor: '#757575' }\n        },\n        {\n            id: 'link23', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            style: { strokeWidth: 2, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'link33', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 40, y: 40 },\n            style: { strokeWidth: 2, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n    ];\n    //Initializes the symbol palette\n    palette = new ej.diagrams.SymbolPalette({\n        expandMode: 'Multiple', allowDrag: false,\n        palettes: [\n            { id: 'flow', expanded: true, symbols: flowshapes, iconCss: 'e-ddb-icons e-basic', title: 'Flow Shapes' },\n            { id: 'basic', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-flow', title: 'Basic Shapes' },\n            { id: 'connectors', expanded: true, symbols: connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\n        ], enableAnimation: true,\n        width: '100%', height: '500px', symbolHeight: 80, symbolWidth: 80,\n        //set Node default value\n        getNodeDefaults: function (symbol) {\n            if (symbol.id === 'terminator' || symbol.id === 'process') {\n                symbol.width = 80;\n                symbol.height = 40;\n            }\n            else if (symbol.id === 'document' || symbol.id === 'predefinedprocess' ||\n                symbol.id === 'papertap' || symbol.id === 'directdata') {\n                symbol.width = 50;\n                symbol.height = 40;\n            }\n            symbol.style = { strokeWidth: 2, strokeColor: '#757575' };\n        },\n        getSymbolInfo: function (symbol) {\n            return { fit: true };\n        },\n        symbolMargin: { left: 15, right: 15, top: 15, bottom: 15 }\n    });\n    palette.appendTo('#symbolpalette');\n    //enable or disable the animation of the symbol palette.\n    animation = new ej.buttons.CheckBox({\n        checked: true,\n        change: onAnimationChange\n    });\n    palette.dataBind();\n    animation.appendTo('#animation');\n    //DropDownList is used to change the expandMode of the Symbolpallete.\n    expand = new ej.dropdowns.DropDownList({\n        index: 1,\n        change: function () {\n            palette.expandMode = expand.value;\n            palette.dataBind();\n        }\n    });\n    expand.appendTo('#expand');\n    //NumericTextBox is used to apply the size of the Symbol.\n    size = new ej.inputs.NumericTextBox({\n        value: 80, min: 40,\n        max: 100, width: 120,\n        step: 5,\n        format: '##.##',\n        change: function () {\n            palette.symbolHeight = size.value;\n            palette.symbolWidth = size.value;\n        }\n    });\n    palette.dataBind();\n    size.appendTo('#size');\n    //Add or Remove the Text for Symbol palette item.\n    itemtext = new ej.buttons.CheckBox({\n        change: onItemTextChange\n    });\n    itemtext.appendTo('#itemtext');\n    headericon = new ej.buttons.CheckBox({\n        checked: true,\n        change: onHeaderIconChange\n    });\n    palette.dataBind();\n    headericon.appendTo('#headericon');\n\n"}