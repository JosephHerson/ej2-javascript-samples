{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/hierarchial-layout-with-multiple-roots/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/22.1.34/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/22.1.34/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n    <div id=\"diagram\"></div>\n    \n\n\n</div></div></body></html>","index.js":"{{ripple}}ej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.HierarchicalTree, ej.diagrams.LayoutAnimation);\n\nvar data = [\n    { id: 1, Label: 'Production Manager' },\n    { id: 2, Label: 'Control Room', parentId: 1 },\n    { id: 3, Label: 'Plant Operator', parentId: 1 },\n    { id: 4, Label: 'Foreman', parentId: 2 },\n    { id: 5, Label: 'Foreman', parentId: 3 },\n    { id: 6, Label: 'Craft Personnel', parentId: 4 },\n    { id: 7, Label: 'Craft Personnel', parentId: 4 },\n    { id: 8, Label: 'Craft Personnel', parentId: 5 },\n    { id: 9, Label: 'Craft Personnel', parentId: 5 },\n    { id: 10, Label: 'Administrative Officer' },\n    { id: 11, Label: 'Security Supervisor', parentId: 10 },\n    { id: 12, Label: 'HR Supervisor', parentId: 10 },\n    { id: 13, Label: 'Reception Supervisor', parentId: 10 },\n    { id: 14, Label: 'Securities', parentId: 11 },\n    { id: 15, Label: 'HR Officer', parentId: 12 },\n    { id: 16, Label: 'Receptionist', parentId: 13 },\n    { id: 17, Label: 'Maintainence Manager' },\n    { id: 18, Label: 'Electrical Supervisor', parentId: 17 },\n    { id: 19, Label: 'Mechanical Supervisor', parentId: 17 },\n    { id: 20, Label: 'Craft Personnel', parentId: 18 },\n    { id: 21, Label: 'Craft Personnel', parentId: 19 },\n];\nvar items = new ej.data.DataManager(data, new ej.data.Query().take(7));\n\n\n//rendering of diagram\nvar diagram = new ej.diagrams.Diagram({\n    width: '100%', height: '499px', snapSettings: { constraints: ej.diagrams.SnapConstraints.None },\n    //configures data source settings\n    dataSourceSettings: {\n        id: 'id', parentId: 'parentId',\n        dataSource: items,\n        doBinding: function (nodeModel, data, diagram) {\n            nodeModel.shape = { type: 'Text', content: data.Label };\n        }\n    },\n    //Disables all interactions except zoom/pan\n    tool: ej.diagrams.DiagramTools.ZoomPan,\n    //Configures automatic layout\n    layout: {\n        type: 'HierarchicalTree', verticalSpacing: 30, horizontalSpacing: 40,\n        enableAnimation: true\n    },\n      //Defines the default node and connector properties\n    getNodeDefaults: function (obj, diagram) {\n        if(obj.data.id === 1 |obj.data.id === 10 |obj.data.id === 17){\n            obj.style = { fill: '#1c5b9b', strokeColor: 'none', color: 'white', strokeWidth: 2 };\n            obj.borderColor = '#1c5b9b';\n            obj.backgroundColor = '#1c5b9b';\n         }\n         else if(obj.data.id === 2 |obj.data.id === 3 |obj.data.id === 11 |obj.data.id ===12 |obj.data.id === 13|obj.data.id === 18|obj.data.id === 19) {\n            obj.style = { fill: '#18c1be', strokeColor: '#18c1be', color: 'white', strokeWidth: 2 };\n            obj.borderColor = '#18c1be';\n            obj.backgroundColor = '#18c1be';\n         }\n         else if(obj.data.id === 4|obj.data.id === 5 |obj.data.id === 14 |obj.data.id === 15|obj.data.id ===16|obj.data.id ===20|obj.data.id ===21) {\n            obj.style = { fill: '#17a573', strokeColor: 'none', color: 'white', strokeWidth: 2 };\n            obj.borderColor = '#17a573';\n            obj.backgroundColor = '#17a573';\n         }\n         else {\n            obj.style = { fill: '#73bb34', strokeColor: 'none', color: 'white', strokeWidth: 2 };\n            obj.borderColor = '#73bb34';\n            obj.backgroundColor = '#73bb34';\n         }\n        obj.width = 75;\n        obj.height =35;\n        obj.shape.margin = { left: 5, right: 5, bottom: 5, top: 5 };\n        return obj;\n    },\n    getConnectorDefaults: function (connector, diagram) {\n        connector.type = 'Orthogonal';\n        return connector;\n    }\n});\ndiagram.appendTo('#diagram');\n"}