{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/constraints/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/22.1.34/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/22.1.34/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"col-lg-10 control-section\">\n    <style>\n            .image-pattern-style {\n                background-color: white;\n                background-size: contain;\n                background-repeat: no-repeat;\n                height: 45px;\n                width: calc((100% - 13px) / 3);\n                cursor: pointer;\n                border: 1px solid #D5D5D5;\n                background-position: center;\n                float: left;\n            }\n        \n            .image-pattern-style:hover {\n                border-color: gray;\n                border-width: 2px;\n            }\n        \n            .row {\n                margin-left: 0px;\n                margin-right: 0px;\n            }\n        \n            .row-header {\n                font-size: 13px;\n                font-weight: 500;\n            }\n        \n            .e-checkbox-wrapper .e-label {\n                font-size: 12px;\n            }\n        \n            .col-xs-6 {\n                padding-left: 0px;\n                padding-right: 0px;\n            }\n        \n            .e-selected-style {\n                border-color: #006CE6;\n                border-width: 2px;\n            }\n        </style>\n<div class=\"content-wrapper\" style=\"width:100%;background: white\">\n    <div id=\"diagram\"></div>\n</div>\n    \n    \n</div>\n<div class=\"col-lg-2 property-section\">\n    <div class=\"property-panel-header\">\n        Diagram Constraints\n    </div>\n    <!-- <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row row-header\">\n            Appearance\n        </div>\n    </div> -->\n    <div class=\"row property-panel-content\" style=\"padding-top: 10px\">\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"zooming\" style=\"width: 15px;margin-left:30px;margin-right: 10px;\">\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"undoRedo\" style=\"width: 15px;margin-left:30px;margin-right: 10px;\">\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"editing\" style=\"width: 15px;margin-left:30px;margin-right: 10px;\">\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"contextmenu\" style=\"width: 15px;margin-left:30px;margin-right: 10px;\">\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"selectable\" style=\"width: 15px;margin-left:30px;margin-right: 10px;\">\n        </div>\n        <div class=\"row\" style=\"padding-top: 8px\">\n            <input type=\"checkbox\" id=\"draggable\" style=\"width: 15px;margin-left:30px;margin-right: 10px;\">\n        </div>\n    </div>\n</div></div></body></html>","index.js":"{{ripple}}\nej.diagrams.Diagram.Inject(ej.diagrams.UndoRedo);\n\n    var nodes = [\n        {\n            id:\"textNode1\",\n            // Position of the node\n            offsetX:340,\n            offsetY: 50,\n            // Size of the node\n            width: 500,\n            height: 50,\n            //Sets type of the node\n            shape: { type: 'Text', content: 'Use Node Constraints to restrict end-users from performing certain operations on Node.' },\n            //Customizes the appearances such as text, font, fill, and stroke.\n            style: { strokeColor: 'none', fill: 'none', color: 'black', textAlign: 'Center', },\n            constraints:  ej.diagrams.NodeConstraints.None\n           \n        },\n        {\n            id:\"rectangle\",\n            offsetX:80,\n            offsetY:160,\n            width: 80,\n            height: 65,\n            // style: { fill: '#6BA5D7', strokeColor: 'white' },\n            shape: { type: 'Basic', shape: 'Rectangle' },\n            annotations: [{ content: 'Selection = False', }],\n            constraints: ej.diagrams.SelectorConstraints.None\n        },\n        {\n            id:\"ellipse\",\n            offsetX:190,\n            offsetY:160,\n            width: 80,\n            height: 80,\n            // style: { fill: '#6BA5D7', strokeColor: 'white' },\n            shape: { type: 'Basic', shape: 'Ellipse',cornerRadius: 10 },\n            annotations: [{ content: 'Dragging = False' }],\n            constraints:  ej.diagrams.NodeConstraints.Default & ~ ej.diagrams.NodeConstraints.Drag\n           \n        },\n        {\n            id:\"heptagon\",\n            offsetX:295,\n            offsetY:160,\n            width: 80,\n            height: 80,\n            // style: { fill: '#6BA5D7', strokeColor: 'white' },\n            shape: { type: 'Basic', shape: 'Heptagon' },\n            annotations: [{ content: 'Delete = False' }],\n            constraints: ej.diagrams.NodeConstraints.Default & ~ ej.diagrams.NodeConstraints.Delete\n        },\n        {\n            id:\"directData\",\n            offsetX:410,\n            offsetY:160,\n            width: 80,\n            height: 80,\n            rotateAngle:-45,\n            // style: { fill: '#6BA5D7', strokeColor: 'white' },\n            shape: { type: 'Flow', shape: 'DirectData' },\n            annotations: [{ content: 'Rotate = False' }],\n            constraints: ej.diagrams.NodeConstraints.Default &~ ej.diagrams.NodeConstraints.Rotate\n        },\n        {\n            id:\"Plus\",\n            offsetX:530,\n            offsetY:160,\n            width: 80,\n            height: 80,\n            // style: { fill: '#6BA5D7', strokeColor: 'white' },\n            shape: { type: 'Basic', shape: 'Plus' },\n            annotations: [{ content: 'TextEdit = False',constraints:ej.diagrams.AnnotationConstraints.ReadOnly }],\n        },\n        {\n            id:\"decision\",\n            offsetX:630,\n            offsetY:160,\n            width: 80,\n            height: 80,\n            // style: { fill: '#6BA5D7', strokeColor: 'white' },\n            shape: { type: 'Flow', shape: 'Decision' },\n            annotations: [{ content: 'Resizing = False' }],\n           constraints: ej.diagrams.NodeConstraints.Default & ~ ej.diagrams.NodeConstraints.Resize\n        },\n        {\n            id:\"textNode2\",\n            // Position of the node\n            offsetX:350,\n            offsetY: 280,\n            // Size of the node\n            width: 550,\n            height: 50,\n            //Sets type of the node\n            shape: { type: 'Text', content: 'Use Connector Constraints to restrict end-users from performing certain operations on Connector.' },\n            //Customizes the appearances such as text, font, fill, and stroke.\n            style: { strokeColor: 'none', fill: 'none', color: 'black', textAlign: 'Center', },\n            constraints:  ej.diagrams.NodeConstraints.None\n        },\n    ];\n    var connectors = [{\n        id: \"select\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'Selection = False' , horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n         constraints: ej.diagrams.ConnectorConstraints.Default & ~ej.diagrams.ConnectorConstraints.Select,\n         style: {\n            strokeColor: '#6BA5D7',\n            fill: '#6BA5D7',\n            strokeWidth: 2\n        },\n        targetDecorator: {\n            style: {\n                fill: '#6BA5D7',\n                strokeColor: '#6BA5D7'\n            }\n        },\n        sourcePoint: {\n            x: 40,\n            y: 350\n        },\n        targetPoint: {\n            x: 120,\n            y: 430\n        }\n    },\n    {\n        id: \"connector2\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'Dragging = True',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n        constraints: ej.diagrams.ConnectorConstraints.Default | ~ej.diagrams.ConnectorConstraints.Drag,\n         style: {\n            strokeColor: '#6BA5D7',\n            fill: '#6BA5D7',\n            strokeWidth: 2\n        },\n        targetDecorator: {\n            style: {\n                fill: '#6BA5D7',\n                strokeColor: '#6BA5D7'\n            }\n        },\n        sourcePoint: {\n            x: 140,\n            y: 350\n        },\n        targetPoint: {\n            x: 220,\n            y: 430\n        }\n    },\n    {\n        id: \"delete\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'Delete = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n        constraints: (ej.diagrams.ConnectorConstraints.Default | ej.diagrams.ConnectorConstraints.DragSegmentThumb) &~(ej.diagrams.ConnectorConstraints.Delete | ej.diagrams.ConnectorConstraints.Drag),\n         style: {\n            strokeColor: '#6BA5D7',\n            fill: '#6BA5D7',\n            strokeWidth: 2\n        },\n        targetDecorator: {\n            style: {\n                fill: '#6BA5D7',\n                strokeColor: '#6BA5D7'\n            }\n        },\n        sourcePoint: {\n            x: 250,\n            y: 350\n        },\n        targetPoint: {\n            x: 320,\n            y: 430\n        }\n    },\n    {\n        id: \"endThumb\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'EndThumb = False' ,horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n        constraints:(ej.diagrams.SelectorConstraints.All ) &~ ( ej.diagrams.SelectorConstraints.ConnectorSourceThumb | ej.diagrams.SelectorConstraints.ConnectorTargetThumb),\n         style: {\n            strokeColor: '#6BA5D7',\n            fill: '#6BA5D7',\n            strokeWidth: 2\n        },\n        targetDecorator: {\n            style: {\n                fill: '#6BA5D7',\n                strokeColor: '#6BA5D7'\n            }\n        },\n        sourcePoint: {\n            x: 360,\n            y: 350\n        },\n        targetPoint: {\n            x: 440,\n            y: 430\n        }\n    },\n    {\n        id: \"draggable\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'EndDraggable = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n        constraints: (ej.diagrams.ConnectorConstraints.Default | ej.diagrams.ConnectorConstraints.DragSegmentThumb) &~(ej.diagrams.ConnectorConstraints.DragSourceEnd | ej.diagrams.ConnectorConstraints.DragTargetEnd),\n         style: {\n            strokeColor: '#6BA5D7',\n            fill: '#6BA5D7',\n            strokeWidth: 2\n        },\n        targetDecorator: {\n            style: {\n                fill: '#6BA5D7',\n                strokeColor: '#6BA5D7'\n            }\n        },\n        sourcePoint: {\n            x: 460,\n            y: 350\n        },\n        targetPoint: {\n            x: 540,\n            y: 430\n        }\n    },\n    {\n        id: \"segmentThumb\",\n        type: 'Orthogonal',\n        annotations: [{ content: 'SegmentThumb = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n        constraints: ej.diagrams.ConnectorConstraints.Default &~ ej.diagrams.ConnectorConstraints.Drag,\n         style: {\n            strokeColor: '#6BA5D7',\n            fill: '#6BA5D7',\n            strokeWidth: 2\n        },\n        targetDecorator: {\n            style: {\n                fill: '#6BA5D7',\n                strokeColor: '#6BA5D7'\n            }\n        },\n        sourcePoint: {\n            x: 580,\n            y: 350\n        },\n        targetPoint: {\n            x: 660,\n            y: 430\n        }\n    },];\n    \n    var handles = [\n        {\n            name: 'delete', pathData: \"M 7.04 22.13 L 92.95 22.13 L 92.95 88.8 C 92.95 91.92 91.55 94.58 88.76 96.74 C 85.97 98.91 82.55 100 78.52 100 L 21.48 100 C 17.45 100 14.03 98.91 11.24 96.74 C 8.45 94.58 7.04 91.92 7.04 88.8 z M 32.22 0 L 67.78 0 L 75.17 5.47 L 100 5.47 L 100 16.67 L 0 16.67 L 0 5.47 L 24.83 5.47 z\",\n            visible: true, offset: 0.5, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n        }\n    ];\n    \n    function getTool(action) {\n        var tool;\n        if (action === 'delete') {\n            diagram.remove();\n        }\n        return tool;\n    }\n    \n    var Zooming = new ej.buttons.CheckBox({ label: 'Zooming',checked:true, \n    change:function () { \n            diagram.constraints = diagram.constraints ^ ej.diagrams.DiagramConstraints.Zoom;\n     }});\n    Zooming.appendTo('#zooming');\n    \n    var undoRedo = new ej.buttons.CheckBox({ label: 'Undo/Redo', checked:true,\n    change:function (args) { \n        diagram.constraints = diagram.constraints ^ ej.diagrams.DiagramConstraints.UndoRedo ;\n        diagram.dataBind();\n     } });\n    undoRedo.appendTo('#undoRedo');\n    \n    \n    var Editing = new ej.buttons.CheckBox({ label: 'Editing',checked:true,\n    change:function () { \n        for (var i = 0; i < diagram.nodes.length; i++) {\n            var node = diagram.nodes[i];\n            for (var j = 0; j < node.annotations.length; j++) {\n              if (node.annotations[j].content) {\n                if (args.checked) {\n                  if (node.id !== 'Plus') {\n                    node.annotations[j].constraints =\n                      node.annotations[j].constraints ^\n                      ej.diagrams.AnnotationConstraints.ReadOnly;\n                  }\n                } else {\n                  node.annotations[j].constraints =\n                    node.annotations[j].constraints |\n                    ej.diagrams.AnnotationConstraints.ReadOnly;\n                }\n              }\n            }\n          }\n          for (var x = 0; x < diagram.connectors.length; x++) {\n            var connector = diagram.connectors[x];\n            for (var y = 0; y < connector.annotations.length; y++) {\n              if (connector.annotations[y].content) {\n                if (args.checked) {\n                  if (connector.id === 'select') {\n                    connector.constraints =\n                      connector.constraints &\n                      ~ej.diagrams.ConnectorConstraints.Select;\n                  } else {\n                    connector.annotations[y].constraints =\n                      connector.annotations[y].constraints ^\n                      ej.diagrams.AnnotationConstraints.ReadOnly;\n                  }\n                } else {\n                  connector.annotations[y].constraints =\n                    connector.annotations[y].constraints ^\n                    ej.diagrams.AnnotationConstraints.ReadOnly;\n                }\n              }\n            }\n          }\n          diagram.dataBind();\n    }});\n    Editing.appendTo('#editing');\n    \nvar Selectable = new ej.buttons.CheckBox({ label: 'Selectable' ,checked:true,\nchange:function (args) { \n    for (var i = 0; i < diagram.nodes.length; i++) {\n        var node = diagram.nodes[i];\n        if (args.checked) {\n            node.constraints  = node.constraints | ej.diagrams.NodeConstraints.Select;\n        } \n        else \n        {\n            node.constraints = node.constraints &~  ej.diagrams.NodeConstraints.Select;\n        }\n        diagram.dataBind();\n    }\n    for (var j = 0; j < diagram.connectors.length; j++) {\n        var connector = diagram.connectors[j];\n        if (args.checked) {\n            if(connector.id ===\"select\"){\n                connector.constraints=connectors.constraints^ej.diagrams.ConnectorConstraints.Select;\n            }\n            else{\n                connector.constraints  = connector.constraints | ej.diagrams.ConnectorConstraints.Select;\n            }\n        } \n        else\n        {\n            if(connector.id ===\"endThumb\"){\n                connector.constraints=connectors.constraints^ej.diagrams.ConnectorConstraints.Select;\n            }\n            else\n            {\n            connector.constraints = connector.constraints &~ ej.diagrams.ConnectorConstraints.Select;\n            }\n        }\n        diagram.dataBind();\n    }\n    \n}});\nSelectable.appendTo('#selectable');\n\nvar Draggable = new ej.buttons.CheckBox({ label: 'Draggable',checked:true,\nchange:function (args) { \n    for (var i = 0; i < diagram.nodes.length; i++) {\n        var nodes = diagram.nodes[i];\n        if (args.checked) {\n             if(nodes.id ===\"ellipse\"){\n                    nodes.constraints =    ej.diagrams.NodeConstraints.Default & ~ ej.diagrams.NodeConstraints.Drag;\n            }\n            else{\n                nodes.constraints = nodes.constraints | ej.diagrams.NodeConstraints.Drag;\n            }\n        } \n        else {\n                nodes.constraints = nodes.constraints &~ ej.diagrams.NodeConstraints.Drag;\n        }\n        diagram.dataBind();\n    }\n    for (var j = 0; j < diagram.connectors.length; j++) {\n        var connectors = diagram.connectors[j];\n        if (args.checked) {\n            connectors.constraints =  connectors.constraints | ej.diagrams.ConnectorConstraints.Drag;   \n        } else \n        {\n            connectors.constraints = connectors.constraints  &~ ej.diagrams.ConnectorConstraints.Drag;   \n        }\n        diagram.dataBind();\n    }\n}});\nDraggable.appendTo('#draggable');  \n    \n    var Contextmenu = new ej.buttons.CheckBox({ label: 'Context Menu',checked:true,\n    change:function (args) { \n        if (args.checked) {\n            diagram.contextMenuSettings.show = true;\n            diagram.refresh();\n            } \n        else {\n            diagram.contextMenuSettings.show = false;\n            }\n        diagram.dataBind();\n    }});\n    Contextmenu.appendTo('#contextmenu');\n\n//selection change method\n    selectionChange = function (args) \n    {\n        if(args.state === 'Changing')\n        {\n            if(args.type === 'Addition')\n            {\n                if(args.newValue[0].id === \"endThumb\")\n            {\n                 diagram.selectedItems.constraints =(ej.diagrams.SelectorConstraints.All ) &~ ( ej.diagrams.SelectorConstraints.ConnectorSourceThumb | ej.diagrams.SelectorConstraints.ConnectorTargetThumb) ;\n                args.newValue[0].constraints = (ej.diagrams.ConnectorConstraints.Default  | ej.diagrams.ConnectorConstraints.DragSegmentThumb) &~ (ej.diagrams.ConnectorConstraints.Drag);\n            }\n            else{\n                diagram.selectedItems.constraints = ej.diagrams.SelectorConstraints.All;\n                }\n            }\n            else\n            {\n                diagram.selectedItems.constraints = ej.diagrams.SelectorConstraints.All;\n            }\n                        \n        }  \n        if(args.state === \"Changed\")\n        {\n            if(args.newValue.length>0 && args.newValue[0] instanceof ej.diagrams.Node){\n                diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All|ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };\n                }\n                else{\n                    if(args.newValue.length>0 && args.newValue[0].id !== \"endThumb\"){\n                        diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All &~ ej.diagrams.SelectorConstraints.UserHandle };\n                    }\n                    else{\n                        diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All &~(ej.diagrams.SelectorConstraints.UserHandle|ej.diagrams.SelectorConstraints.ConnectorSourceThumb | ej.diagrams.SelectorConstraints.ConnectorTargetThumb)   };\n                    }\n                }\n        }\n    } ;\n\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '600px', nodes: nodes,connectors: connectors,\n        contextMenuSettings: {\n            show: true,\n           \n        },\n        rulerSettings: {\n            showRulers: true\n        },\n        selectionChange: function (args) { selectionChange(args); },\n        selectedItems: { constraints: ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles },\n        getCustomTool: getTool\n    }, '#diagram');\n\n"}