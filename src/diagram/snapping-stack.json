{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/snapping/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/22.1.34/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/22.1.34/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"col-lg-8 control-section\">\n    <style>\n        body{\n        /* background: #e3e3e3; */\n        }\n        .header_text{\n            color: rgb(9, 9, 9);\n            font-weight: bold;\n            font-size: 20px;\n            font-family: 'Calibri';\n            margin-left: 5px;\n            margin-top: 5px;\n        }\n        .db-diagram-container {\n        width:calc(100% - 300px);\n        height: 100%;\n        float: left;\n        }\n        .db-prop-row {\n        margin-top: 6px;\n        }\n        .db-col-left {\n        padding-left: 10px;\n        padding-right: 3px;\n        }\n    \n        .db-prop-text-style {\n        font-size: 13px;\n        font-weight: normal;\n        font-family: 'Calibri';\n        margin-top: 25px;\n        }\n        .radio-text-style{\n        font-size: 13px;\n        font-weight: normal;\n        font-family: 'Calibri';\n        margin-top: 10px;\n        }\n        .text-content{\n            margin-left: 10px;\n        }\n        .db-check-input{\n            float: right;\n            margin-right: 180px;\n        }\n        .db-text-input{\n            height: 25px!important;\n        }\n        .e-checkbox-wrapper .e-label{\n            font-size: 12px!important;\n        }\n        .e-radio+label .e-label{\n            font-size: 12px!important;\n        }\n        #properties_Container{\n        /* background: #e3e3e3; */\n        width: 300px;\n        float: left;\n        height: 600px;\n        margin-top: 30px;\n        }\n        .e-colorpicker-wrapper .e-split-btn-wrapper .e-split-colorpicker.e-split-btn .e-selected-color .e-split-preview{\n        width: 100px!important;\n        margin-left: -40px!important;\n        }\n        .e-colorpicker-wrapper .e-split-btn-wrapper .e-split-colorpicker.e-split-btn{\n            width: 110px!important;\n        }\n    </style>\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <div id=\"diagram\"></div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n<div id=\"properties_Container\">\n    <span class=\"property-panel-header\">\n        Properties\n    </span>\n    <div class=\"db-prop-row\">\n        <div class=\"db-prop-text-style\">\n            <span class=\"db-prop-text-style text-content\">Snapping Interval</span>\n            <div class=\"db-text-input\" style=\"float: right;margin-right: 10px;\">\n                <input style=\"width: 150px;\" id=\"snappingInterval\" type=\"text\">\n            </div>\n        </div>\n        <div class=\"db-prop-text-style\">\n            <span class=\"db-prop-text-style text-content\">Snapping Angle</span>\n            <div class=\"db-text-input\" style=\"float: right;margin-right: 10px;\">\n                <input style=\"width: 150px;\" id=\"snappingAngle\" type=\"text\">\n            </div>\n        </div>\n        <div class=\"db-prop-text-style\">\n            <span class=\"db-prop-text-style text-content\">Snapping Line Color</span>\n            <div class=\"db-text-input\" style=\"float: right;margin-right: 10px;\">\n                <input id=\"snappingLineColor\" type=\"color\">\n            </div>\n        </div>\n        <div class=\"db-prop-text-style\">\n            <input type=\"checkbox\" style=\"margin-left: 10px;\" id=\"showGridlines\">\n        </div>\n        <div class=\"db-prop-text-style\" style=\"margin-top: 7px!important;\">\n            <input type=\"checkbox\" style=\"margin-left: 10px;\" id=\"snapToObject\">\n        </div>\n\n           <div class=\"db-prop-text-style\">\n            <span class=\"db-prop-text-style text-content\" style=\"font-weight: bold;\">Snapping To Lines</span>\n        </div>\n\n        <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n            <input id=\"radio1\" type=\"radio\">\n        </div>\n        <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n            <input id=\"radio2\" type=\"radio\">\n        </div>\n        <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n            <input id=\"radio3\" type=\"radio\">\n        </div>\n        <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n            <input id=\"radio4\" type=\"radio\">\n        </div>\n    </div>\n</div>\n    <div class=\"row\">\n        \n        <div class=\"col-xs-6 db-col-right\">\n            <div class=\"db-text-container\" style=\"width: 77px; margin-left: 20px;\">\n                \n            </div>\n        </div>\n    </div>\n</div>\n\n\n\n</div></body></html>","index.js":"{{ripple}}/**\r\n * Snapping diagram\r\n */\r\n \r\n var nodes = [\r\n    {\r\n        id:'node_1',width:100,height:100,offsetX:350,offsetY:250,\r\n        ports:[\r\n            {id:'port1',offset:{x:0.5,y:0.5},visibility:ej.diagrams.PortVisibility.Visible,\r\n            style:{fill:'black'},\r\n            constraints:ej.diagrams.PortConstraints.Default|ej.diagrams.PortConstraints.Draw\r\n        }],\r\n        annotations:[{id:'annot1',content:'Shape 1',horiontalAlignment:'Top',offset:{x:0.5,y:1.2},style:{bold:true}}]\r\n    },\r\n    {\r\n        id:'node_2',width:100,height:100,offsetX:650,offsetY:250,\r\n        ports:[\r\n            {id:'port11', offset:{x:0.5,y:0.5},visibility: ej.diagrams.PortVisibility.Visible,style:{fill:'black'},\r\n            constraints:ej.diagrams.PortConstraints.Default|ej.diagrams.PortConstraints.Draw\r\n        },{\r\n            id:'port2',offset:{x:0,y:0.5},visibility:ej.diagrams.PortVisibility.Visible,\r\n            style:{fill:'black'},\r\n            constraints:ej.diagrams.PortConstraints.Default|ej.diagrams.PortConstraints.Draw,\r\n            height:100,width:7\r\n        }],\r\n        annotations:[{id:'annot1',content:'Shape 2',horiontalAlignment:'Top',offset:{x:0.5,y:1.2},style:{bold:true}}]\r\n\r\n    },\r\n    {\r\n        id:'node_3',width:100,height:100,offsetX:500,offsetY:400,\r\n        annotations:[{id:'annot1',content:'Shape 3',horiontalAlignment:'Top',offset:{x:0.5,y:1.2},style:{bold:true}}]\r\n\r\n    },\r\n];\r\n\r\nvar connectors = [\r\n    {\r\n        id:'connector_1',sourceID:'node_1',targetID:'node_3',type:'Orthogonal',\r\n    }\r\n];\r\n\r\nvar contextMenu = {\r\n    show: true,\r\n    showCustomMenuOnly: false,\r\n};\r\nvar handles = [\r\n    {\r\n        name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',\r\n        visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\r\n    },\r\n    {\r\n        name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',\r\n        visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\r\n    },\r\n    {\r\n        name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',\r\n        visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }\r\n    },\r\n];\r\n\r\nvar diagram = new ej.diagrams.Diagram({\r\n    width: '100%', height: '645px', nodes: nodes,\r\n    rulerSettings:{showRulers:true},\r\n    scrollSettings:{scrollLimit:'Infinity'},\r\n    drawingObject:{type:'Orthogonal'},\r\n    contextMenuSettings: contextMenu,\r\n    onUserHandleMouseDown:userHandelClick,\r\n    connectors:connectors,\r\n    snapSettings:{snapAngle:5},\r\n    getNodeDefaults:getNodeDefaults,\r\n    getConnectorDefaults:getConnectorDefaults,\r\n    created:created,\r\n    selectionChange:selectionChange,\r\n    rotateChange:rotateChange\r\n    });\r\n    diagram.appendTo('#diagram');\r\n    \r\n    function created(){\r\n        diagram.fitToPage({mode:'Width'});\r\n    }\r\n    function selectionChange(args){\r\n        if(args.state === 'Changed'){\r\n            var selectedItems = diagram.selectedItems.nodes;\r\n            selectedItems = selectedItems.concat(diagram.selectedItems.connectors);\r\n            if(selectedItems.length>0){\r\n                if(args.newValue.length>0 && args.newValue[0] instanceof ej.diagrams.Node){\r\n                    diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All|ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };\r\n                    if(diagram.selectedItems.nodes.length>0){\r\n                        drawingNode = diagram.selectedItems.nodes[diagram.selectedItems.nodes.length-1];\r\n                    }\r\n                }\r\n                else{\r\n            diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All&~ej.diagrams.SelectorConstraints.UserHandle };\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    function getConnectorDefaults(obj){\r\n        obj.constraints = ej.diagrams.ConnectorConstraints.Default|ej.diagrams.ConnectorConstraints.DragSegmentThumb;\r\n    }\r\n    function getNodeDefaults(obj){\r\n        obj.style = {fill:'orange',strokeColor:'orange'};\r\n    }\r\n    function rotateChange(args){\r\n        if(args.state === 'Start' || args.state === 'Progress')\r\n    {\r\n        diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All&~ej.diagrams.SelectorConstraints.UserHandle};\r\n    }\r\n    if(args.state === 'Completed'){\r\n        diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All|ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };\r\n    }\r\n    }\r\n    function userHandelClick(args){\r\n        switch(args.element.name)\r\n        {\r\n            case 'Delete':\r\n                diagram.remove();\r\n                break;\r\n            case 'Clone':\r\n               diagram.paste(diagram.selectedItems.selectedObjects);\r\n               break;\r\n            case 'Draw':\r\n                diagram.drawingObject.shape = {};\r\n                diagram.drawingObject.type = diagram.drawingObject.type?diagram.drawingObject.type:'Orthogonal';\r\n                diagram.drawingObject.sourceID = drawingNode.id;\r\n                diagram.dataBind();\r\n                break;\r\n        }\r\n    }\r\n\r\n    var snappingInterval = new ej.inputs.NumericTextBox({\r\n        min: 1,\r\n        step: 1,\r\n        width:150,\r\n        value:20,\r\n        format: 'n0',\r\n        change: function (args) {\r\n            diagram.snapSettings.horizontalGridlines.snapIntervals[0] = args.value;\r\n            diagram.snapSettings.verticalGridlines.snapIntervals[0] = args.value;\r\n            diagram.snapSettings.horizontalGridlines.scaledIntervals[0] = args.value;\r\n            diagram.snapSettings.verticalGridlines.scaledIntervals[0] = args.value;\r\n            diagram.dataBind();\r\n       }\r\n    });\r\n    snappingInterval.appendTo('#snappingInterval');\r\n\r\n    var snappingAngle = new ej.inputs.NumericTextBox({\r\n        min: 1,\r\n        step: 1,\r\n        value:5,\r\n        format: 'n0',\r\n        change: function (args) {\r\n            diagram.snapSettings.snapAngle =args.value;\r\n            diagram.dataBind();\r\n       }\r\n    });\r\n    snappingAngle.appendTo('#snappingAngle');\r\n\r\n    var snappingLineColor = new ej.inputs.ColorPicker({\r\n        mode: 'Palette',\r\n        width: '100%',\r\n        height:25,\r\n        showButtons:false,\r\n        value:'#07EDE1',\r\n        change: function (args){\r\n            diagram.snapSettings.snapLineColor = args.value;\r\n            diagram.dataBind();                \r\n         }\r\n    });\r\n    snappingLineColor.appendTo('#snappingLineColor');\r\n\r\n    var showGridlines = new ej.buttons.CheckBox({ label: 'Show Gridline', checked: true,\r\n    change: function (args) { \r\n        diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ ej.diagrams.SnapConstraints.ShowLines;\r\n        diagram.dataBind();\r\n        scale();\r\n     }});\r\n    showGridlines.appendTo('#showGridlines');\r\n\r\n     var snapToObject = new ej.buttons.CheckBox({ label: 'Snapping To Objects', checked: true,\r\n     change: function (args) { \r\n         diagram.snapSettings.constraints = diagram.snapSettings.constraints ^ ej.diagrams.SnapConstraints.SnapToObject;\r\n         diagram.dataBind();\r\n         scale();\r\n      }});\r\n      snapToObject.appendTo('#snapToObject');\r\n\r\n    var radioButton = new ej.buttons.RadioButton({ label: 'Snap To Gridlines', name: 'snapToLines', value: 'Snap To Gridlines', checked: true,change:snapToLines });\r\n    radioButton.appendTo('#radio1');\r\n\r\n    var radioButton1 = new ej.buttons.RadioButton({ label: 'Snap To Horizontal Gridlines', name: 'snapToLines', value: 'Snap To Horizontal Gridlines',change:snapToLines });\r\n    radioButton1.appendTo('#radio2');\r\n\r\n    var radioButton2 = new ej.buttons.RadioButton({ label: 'Snap To Vertical Gridlines', name: 'snapToLines', value: 'Snap To Vertical Gridlines',change:snapToLines });\r\n    radioButton2.appendTo('#radio3');\r\n\r\n   var radioButton3 = new ej.buttons.RadioButton({ label: 'None', name: 'snapToLines', value: 'None',change:snapToLines });\r\n    radioButton3.appendTo('#radio4');\r\n\r\n    function snapToLines(args){\r\n        if(showGridlines.checked && snapToObject.checked){\r\n            diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All;\r\n        }\r\n       else if(showGridlines.checked && !snapToObject.checked){\r\n        diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All &~ej.diagrams.SnapConstraints.SnapToObject;\r\n       }\r\n       else if(!showGridlines.checked && snapToObject.checked){\r\n        diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All &~ej.diagrams.SnapConstraints.ShowLines;\r\n       }\r\n       else if(!showGridlines.checked && !snapToObject.checked){\r\n        diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All &~(ej.diagrams.SnapConstraints.ShowLines|ej.diagrams.SnapConstraints.SnapToObject);\r\n       }\r\n        switch(args.value){\r\n            case 'Snap To Gridlines':\r\n                diagram.snapSettings.constraints =  ej.diagrams.SnapConstraints.All| ej.diagrams.SnapConstraints.SnapToLines;\r\n                if( !showGridlines.checked && !snapToObject.checked ) {\r\n                   diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All &~ (ej.diagrams.SnapConstraints.ShowLines|ej.diagrams.SnapConstraints.SnapToObject);\r\n                }\r\n                else if( !snapToObject.checked && showGridlines.checked ){\r\n                    diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All &~ (ej.diagrams.SnapConstraints.SnapToObject);\r\n                }\r\n                else if(snapToObject.checked && !showGridlines.checked) {\r\n                    diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All &~ (ej.diagrams.SnapConstraints.ShowLines);\r\n                }\r\n            break;\r\n            case 'Snap To Horizontal Gridlines':\r\n                diagram.snapSettings.constraints =  diagram.snapSettings.constraints ^ ej.diagrams.SnapConstraints.SnapToVerticalLines;\r\n            break;\r\n            case 'Snap To Vertical Gridlines':\r\n                diagram.snapSettings.constraints =  diagram.snapSettings.constraints ^ ej.diagrams.SnapConstraints.SnapToHorizontalLines;\r\n            break;\r\n            case 'None':\r\n                diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All &~ (ej.diagrams.SnapConstraints.SnapToHorizontalLines|ej.diagrams.SnapConstraints.SnapToVerticalLines|ej.diagrams.SnapConstraints.SnapToLines);\r\n                if(!showGridlines.checked && !snapToObject.checked){\r\n                    diagram.snapSettings.constraints = ej.diagrams.SnapConstraints.All &~ (ej.diagrams.SnapConstraints.ShowLines|ej.diagrams.SnapConstraints.SnapToObject|ej.diagrams.SnapConstraints.SnapToHorizontalLines|ej.diagrams.SnapConstraints.SnapToVerticalLines|ej.diagrams.SnapConstraints.SnapToLines);\r\n                 }\r\n                 else if(showGridlines.checked && !snapToObject.checked){\r\n                     diagram.snapSettings.constraints =  ej.diagrams.SnapConstraints.All &~ (ej.diagrams.SnapConstraints.SnapToObject|ej.diagrams.SnapConstraints.SnapToHorizontalLines|ej.diagrams.SnapConstraints.SnapToVerticalLines|ej.diagrams.SnapConstraints.SnapToLines);\r\n                 }\r\n                 else if(!showGridlines.checked && snapToObject.checked){\r\n                     diagram.snapSettings.constraints =  ej.diagrams.SnapConstraints.All &~ (ej.diagrams.SnapConstraints.ShowLines|ej.diagrams.SnapConstraints.SnapToHorizontalLines|ej.diagrams.SnapConstraints.SnapToVerticalLines|ej.diagrams.SnapConstraints.SnapToLines);\r\n                 }\r\n            break;\r\n        }\r\n        diagram.dataBind();\r\n        scale();\r\n        \r\n    }\r\n    function scale(){\r\n        diagram.snapSettings.horizontalGridlines.scaledIntervals[0] = snappingInterval.value;\r\n        diagram.snapSettings.verticalGridlines.scaledIntervals[0] = snappingInterval.value;\r\n        diagram.dataBind();\r\n    }\r\n"}