{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/grouping-and-ordering/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/22.1.34/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/22.1.34/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<div class=\"control-section\" style=\"width: 100%\">\n<style>\n    .db-toolbar-container {\n        width: 100% ;\n       height: 44px;\n    }\n    .db-palette-parent {\n        background-color:#fafafa;\n        width: 255px!important;\n        float: left;\n        height:calc(100% - 28px);\n    }\n    .db-diagram-container {\n        width:calc(100% - 260px);\n        height: 100%;\n        float: right;\n    }\n    .e-toolbar .e-toolbar-items .e-toolbar-item.tb-item-selected .e-tbar-btn.e-btn,\n    .e-toolbar .e-toolbar-items .e-toolbar-item .e-dropdown-btn.tb-item-selected {\n        background: #5f6161;\n    }\n\n    .e-toolbar .e-toolbar-items .e-toolbar-item.tb-item-selected .e-tbar-btn .e-icons.e-btn-icon,\n    .e-toolbar .e-toolbar-items .e-toolbar-item .e-dropdown-btn.tb-item-selected .e-btn-icon {\n        color: #ffffff;\n    }\n</style>\n    <div class=\"db-toolbar-container\">\n        <div id=\"toolbarEditor\"></div>\n    </div>\n    <div>\n        <div class=\"db-palette-parent\">\n            <div id=\"symbolpalette\"></div>\n        </div>\n        <div class=\"db-diagram-container\">\n            <div id=\"diagram\"></div>\n        </div>\n    </div>\n    \n    \n</div>\n    \n    \n    </div></body></html>","index.js":"{{ripple}}\n\nvar nodes = [\n    {\n    id:\"Diamond\",\n    // Position of the node\n    offsetX: 350,\n    offsetY: 250,\n    // Size of the node\n    width: 100,\n    height: 100,\n    shape: { type: 'Basic', shape: 'Diamond' },\n    annotations: [{\n    content: 'Decision'\n    }]\n    },\n    {\n    id:\"ellipse\",\n    // Position of the node\n    offsetX: 150,\n    offsetY: 250,\n    // Size of the node\n    width: 100,\n    height: 60,\n    shape: { type: 'Basic', shape: 'Ellipse' },\n    annotations: [{\n        content: 'Start/Stop'\n    }]\n    },\n    {\n    id:\"node1\",\n    // Position of the node\n    offsetX: 150,\n    offsetY: 100,\n    // Size of the node\n    width: 100,\n    height: 55,\n    shape: { type: 'Basic', shape: 'Rectangle' },\n    },\n    {\n    id:\"node2\",\n    // Position of the node\n    offsetX: 350,\n    offsetY: 100,\n    // Size of the node\n    width: 90,\n    height: 55,\n    // style: { fill: '#6BA5D7', strokeColor: 'white' },\n      shape: { type: 'Basic', shape: 'Rectangle' ,cornerRadius:5},\n    },\n    {\n    id: 'group',\n    children: ['node1', 'node2'],\n    padding:{left:10,right:10,top:10,bottom:10},\n    annotations: [{\n      content: 'Group 1'\n  }]\n},\n{\n  id:\"rectangle\",\n  // Position of the node\n  offsetX: 150,\n  offsetY: 400,\n  // Size of the node\n  width: 100,\n  height: 60,\n  shape: { type: 'Basic', shape: 'Rectangle' },\n  annotations: [{\n    content: 'Process'\n  }]\n},\n];\nvar diagram;\n\n\n    //Initializes diagram control\n    diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '500px',\n        nodes:nodes,\n        rulerSettings: { showRulers :true},\n        drawingObject:{type:'Orthogonal'},\n        selectionChange: function (args) {selectionChange(args); },\n        onUserHandleMouseDown:function (args) { userHandleClick(args); },\n});\ndiagram.appendTo('#diagram');\n\nvar handles = [\n    {\n        name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',tooltip:{content:'Clone'},\n        visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n        name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',tooltip:{content:'Delete'},\n        visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n        name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',tooltip:{content:'Draw'},\n        visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n  ];\n  \n // method to disable toolbar items \n  disableMultiselectedItems =function (selectedItems){\n    for(i=0;i<selectedItems.length;i++){\n      if(selectedItems[i].annotations[0] !== undefined){\n        toolbarObj.items[8].disabled = false;\n        toolbarObj.items[10].disabled = false;\n        toolbarObj.items[11].disabled = false;\n        toolbarObj.items[12].disabled = false;\n        toolbarObj.items[13].disabled = false;\n        toolbarObj.items[14].disabled = false;\n      }\n      else{\n        toolbarObj.items[8].disabled = true;\n        toolbarObj.items[10].disabled = true;\n        toolbarObj.items[11].disabled = true;\n        toolbarObj.items[12].disabled = true;\n        toolbarObj.items[13].disabled = true;\n        toolbarObj.items[14].disabled = true;\n      }\n    }\n  };\n\n  selectionChange = function (args) \n  { \n  if(args.state === \"Changed\")\n  {\n    var selectedItems = diagram.selectedItems.nodes;\n    selectedItems = selectedItems.concat(diagram.selectedItems.connectors);\n    if(selectedItems.length===0){\n      toolbarObj.items[0].disabled = true;\n      toolbarObj.items[1].disabled = true;\n      toolbarObj.items[3].disabled = true;\n      toolbarObj.items[4].disabled = true;\n      toolbarObj.items[5].disabled = true;\n      toolbarObj.items[6].disabled = true;\n      toolbarObj.items[8].disabled = true;\n      toolbarObj.items[10].disabled = true;\n      toolbarObj.items[11].disabled = true;\n      toolbarObj.items[12].disabled = true;\n      toolbarObj.items[13].disabled = true;\n      toolbarObj.items[14].disabled = true;\n      }\n      if(selectedItems.length === 1){\n        enableItems();\n        disableMultiselectedItems(selectedItems);\n       \n      if(selectedItems[0].children !== undefined && selectedItems[0].children.length>0){\n        toolbarObj.items[1].disabled = false;\n        disableMultiselectedItems(selectedItems);\n      }\n      else{\n        toolbarObj.items[1].disabled = true;\n      }\n      \n      }\n      if(selectedItems.length > 1){\n        enableItems();\n        toolbarObj.items[0].disabled = false; \n        toolbarObj.items[1].disabled = true;\n        disableMultiselectedItems(selectedItems);\n      }\n    if(args.newValue.length>0 && args.newValue[0] instanceof ej.diagrams.Node){\n      diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All|ej.diagrams.SelectorConstraints.UserHandle, userHandles: handles };\n        if(diagram.selectedItems.nodes.length>0){\n           drawingNode = diagram.selectedItems.nodes[diagram.selectedItems.nodes.length-1];\n        }\n      }\n    else\n    {\n    diagram.selectedItems = { constraints: ej.diagrams.SelectorConstraints.All&~ej.diagrams.SelectorConstraints.UserHandle };\n    }\n  }\n  };\n\nfunction enableItems()\n{\n  toolbarObj.items[3].disabled = false;\n  toolbarObj.items[4].disabled = false;\n  toolbarObj.items[5].disabled = false;\n  toolbarObj.items[6].disabled = false;\n}\n\n//method to add functionality to user handle\n  userHandleClick = function(args)\n  {\n    switch(args.element.name)\n    {\n    case 'Delete':\n      diagram.remove();\n      break;\n    case 'Clone':\n      diagram.paste(diagram.selectedItems.selectedObjects);\n      break;\n    case 'Draw':\n      diagram.drawingObject.shape = {};\n      diagram.drawingObject.type = diagram.drawingObject.type?diagram.drawingObject.type:'Orthogonal';\n      diagram.drawingObject.sourceID = drawingNode.id;\n      diagram.dataBind();\n      break;\n    }\n  };\n\n//Apply the appearence of the Annotation \nfunction updateAnnotationValue(value, fontSize, fontFamily,index,isSelected) {\n    for (var i = 0; i < diagram.selectedItems.nodes.length; i++) {\n        var node = diagram.selectedItems.nodes[i];\n        for (var j = 0; j < node.annotations.length; j++) {\n            var annotationstyle = node.annotations[j].style;\n            if (value === 'fontsize') {\n                annotationstyle.fontSize = fontSize;\n            } else if (value === 'fontfamily') {\n                annotationstyle.fontFamily = fontFamily.toString();\n            }\n            else if (value === 'bold') {\n              annotationstyle.bold = !annotationstyle.bold;\n              isSelected=annotationstyle.bold;\n           }\n           else if (value === 'italic') {\n            annotationstyle.italic = !annotationstyle.italic;\n            isSelected= annotationstyle.italic;\n          } \n          else if (value === 'underline') {\n            if(annotationstyle.textDecoration ===\"None\"){\n              annotationstyle.textDecoration = 'Underline';\n              isSelected = true;\n            }\n            else{\n              annotationstyle.textDecoration = 'None';\n              isSelected =false;\n              }\n            }\n          var toolbarTextStyle = document.getElementById(\"toolbarEditor\");\n          if (toolbarTextStyle) {\n            toolbarTextStyle = toolbarTextStyle.ej2_instances[0];\n          }\n          if (toolbarTextStyle.items[index] !== undefined) {\n            var cssClass = toolbarTextStyle.items[index].cssClass;\n            toolbarTextStyle.items[index].cssClass = isSelected ? cssClass + ' tb-item-selected' : cssClass.replace(' tb-item-selected', '');\n            toolbarTextStyle.dataBind();\n          }\n          diagram.dataBind();\n        }\n      }\n    }\n\n      var fontSize  =  new ej.inputs.NumericTextBox({\n          value: 12, min: 1, max: 30, width: '90px',\n          format: '##.##', step: 2,\n          change: function(args)  {\n            updateAnnotationValue('fontsize', args.value);\n          }\n      });\n      fontSize.appendTo('#fontSize');\n    \n      var fontTypeList = [\n        { type: 'Arial', text: 'Arial' },\n        { type: 'Aharoni', text: 'Aharoni' },\n        { type: 'Bell MT', text: 'Bell MT' },\n        { type: 'Fantasy', text: 'Fantasy' },\n        { type: 'Segoe UI', text: 'Segoe UI' },\n        { type: 'Times New Roman', text: 'Times New Roman' },\n        { type: 'Verdana', text: 'Verdana' }\n    ];\n      var fontFamily =new ej.dropdowns.DropDownList({\n        dataSource: fontTypeList,\n        fields: { value: 'type', text: 'text' }, popupWidth: 150,\n        width: '100%', placeholder: 'select a font type', index: 0,\n        change: function(args)  {\n            updateAnnotationValue('fontfamily', null, args.value.toString());\n        }\n    });\n    fontFamily.appendTo('#fontfamily');\n    \n    var fontColors = new ej.inputs.ColorPicker({\n    mode: 'Palette',\n      value: '#000',\n       change: function (arg) {\n          for (var i = 0; i < diagram.selectedItems.nodes.length; i++) {\n              var nodes = diagram.selectedItems.nodes[i];\n              for (var j = 0; j < nodes.annotations.length; j++) {\n                  nodes.annotations[j].style.color = arg.currentValue.rgba;\n                  diagram.dataBind();\n              }\n          }\n      }\n    });\n    fontColors.appendTo('#fontColors');\n\n    //Toolbar functionality\nfunction toolbarClick(args) {\n    switch (args.item.tooltipText) {\n        case 'Group':\n            diagram.group();\n            toolbarObj.items[0].disabled = true;\n            toolbarObj.items[1].disabled = false;\n            break;\n        case 'UnGroup':\n            diagram.unGroup();\n            break;\n        case 'Bring Forward':\n            diagram.moveForward();\n            break;\n        case 'Bring To Front':\n            diagram.bringToFront();\n            break;\n        case 'Send Backward':\n            diagram.sendBackward();\n            break;\n        case 'Send To Back':\n            diagram.sendToBack();\n            break;\n        case 'Bold':\n            updateAnnotationValue('bold',args.value,null,11);\n        break;\n        case 'Italic':\n            updateAnnotationValue('italic',args.value,null,12);  \n        break;\n        case 'Underline':\n            updateAnnotationValue('underline',args.value,null,13);\n        break;\n      }\n      diagram.dataBind();\n}\n\n//create the Toolbar and adding items in ToolBar.\nvar toolbarObj = new ej.navigations.Toolbar({\n    clicked: toolbarClick,\n    items: [\n        {\n            type: 'Button',\n            tooltipText: 'Group',\n            prefixIcon: 'e-icons e-group-1',\n            disabled:true\n        },\n        {\n            type: 'Button',\n            tooltipText: 'UnGroup',\n            prefixIcon: 'e-icons e-ungroup-1',\n            disabled:true\n        },\n        { type: 'Separator' },\n        {\n            type: 'Button',\n            tooltipText: 'Bring Forward',\n            prefixIcon: 'e-icons e-bring-forward',\n            disabled:true\n         },\n        {\n            type: 'Button',\n            tooltipText: 'Bring To Front',\n            prefixIcon: 'e-icons e-bring-to-front',\n            disabled:true\n        },\n        {\n            type: 'Button',\n            tooltipText: 'Send Backward',\n            prefixIcon: 'e-icons e-send-backward',\n            disabled:true\n        },\n        {\n            type: 'Button',\n            tooltipText: 'Send To Back',\n            prefixIcon: 'e-icons e-send-to-back',\n            disabled:true\n        },\n        { type: 'Separator' ,template:'<div style=\"margin-left:1px;\"></div>'},\n        {\n            type: 'Input', tooltipText: 'Font Style', align: 'Left', template: fontFamily, disabled:true\n        },\n        { type: 'Separator', template:'<div style=\"margin-left:5px;\"></div>'},\n        {\n            type: 'Input', tooltipText: 'Font Size', align: 'Left', template: fontSize,  disabled:true,style :\"margin-left:3px\"\n        },\n        {\n            type: 'Button',\n            tooltipText: 'Bold',\n            prefixIcon: 'e-icons e-bold',\n            disabled:true,\n            cssClass: 'tb-item-start'\n        },\n        {\n            type: 'Button',\n            tooltipText: 'Italic',\n            prefixIcon: 'e-icons e-italic',\n            disabled:true,\n            cssClass: 'tb-item-middle'\n        },\n        {\n            type: 'Button',\n            tooltipText: 'Underline',\n            prefixIcon: 'e-icons e-underline',\n            disabled:true,\n            cssClass: 'tb-item-end'\n        },\n        {\n            type: 'Input',  tooltipText: 'Font Color', align: 'Left', template: fontColors ,disabled:true\n        },\n  ],\n});\ntoolbarObj.appendTo('#toolbarEditor');\n\n//defining palette shapes\nvar basicShapes = [\n    { id: 'Rectangle', shape: { type: 'Basic', shape: 'Rectangle' }, style: { strokeWidth: 2 } },\n    { id: 'Ellipse', shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeWidth: 2 } },\n    { id: 'Hexagon', shape: { type: 'Basic', shape: 'Hexagon' }, style: { strokeWidth: 2 } },\n    { id: 'Parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' }, style: { strokeWidth: 2 } },\n    { id: 'Triangle', shape: { type: 'Basic', shape: 'Triangle' }, style: { strokeWidth: 2 } },\n    { id: 'Plus', shape: { type: 'Basic', shape: 'Plus' }, style: { strokeWidth: 2 } },\n    { id: 'Star', shape: { type: 'Basic', shape: 'Star' }, style: { strokeWidth: 2 } },\n    { id: 'Pentagon', shape: { type: 'Basic', shape: 'Pentagon' }, style: { strokeWidth: 2 } },\n    { id: 'Heptagon', shape: { type: 'Basic', shape: 'Heptagon' }, style: { strokeWidth: 2 } },\n    { id: 'Octagon', shape: { type: 'Basic', shape: 'Octagon' }, style: { strokeWidth: 2 } },\n    { id: 'Trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' }, style: { strokeWidth: 2 } },\n    { id: 'Decagon', shape: { type: 'Basic', shape: 'Decagon' }, style: { strokeWidth: 2 } },\n    { id: 'RightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' }, style: { strokeWidth: 2 } },\n    { id: 'Cylinder', shape: { type: 'Basic', shape: 'Cylinder' }, style: { strokeWidth: 2 } },\n    { id: 'Diamond', shape: { type: 'Basic', shape: 'Diamond' }, style: { strokeWidth: 2 } },\n  ];\n\n  //rendering palettes\n  var palette = new ej.diagrams.SymbolPalette({\n    expandMode: 'Multiple' ,\n    width: '100%',\n    height: '100%',\n    symbolWidth :50,\n    symbolHeight:50,\n    palettes: [\n        { id: 'basicShapes', expanded: true, symbols: basicShapes, iconCss: 'e-ddb-icons e-flow', title: 'Basic Shapes' }, \n      ],\n      symbolMargin: { left: 5, right: 5, top: 5, bottom:10},\n    });\n    palette.appendTo('#symbolpalette');\n"}