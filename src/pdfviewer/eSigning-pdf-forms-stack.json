{"index.html":"<html><head><script src=\"https://cdn.syncfusion.com/ej2/26.2.4/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/26.2.4/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n            .control-section{\n                margin-top:100px;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\"><div class=\"control-section\">\n  <div class=\"content-wrapper\">\n    <div id=\"e-pv-e-sign-toolbar_user_viewer\">\n    </div>\n    <div id=\"pdfViewer\" style=\"height:640px; width:100%;\">\n    </div>\n    <div id=\"dialog-target\">\n      <div id=\"dialog\"></div>\n    </div>\n  </div>\n</div>\n\n\n\n\n\n<style>\n\n  #e-pv-e-sign-user-field {\n    color: #222933;\n    font-family: Heebo, open sans, 'sans-serif', -apple-system,\n      BlinkMacSystemFont;\n    display: flex;\n    position: relative;\n\n  }\n\n  #e-pv-e-sign-toolbar_user_viewer{\n    z-index: 1001;\n    width: 100% !important;\n    height: 48px !important;\n    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);\n  }\n\n  #e-pv-e-sign-finish-btn{\n    width: 115px !important;\n    height: 28px;\n    min-height: 0;\n    padding: 0;\n    font-size: 12px;\n    flex-shrink: 0;\n    border-radius: 16px;\n    border: 1px solid;\n  }\n\n  .e-pv-e-sign-user-dropdown .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::before,\n  .e-pv-e-sign-user-dropdown .e-input-group:not(.e-float-icon-left):not(.e-float-input).e-input-focus::after {\n    width: 0px;\n\n  }\n\n  .e-pv-e-sign-empImage {\n    width: 32px;\n    height: 32px;\n    margin-top: 7px;\n    margin-left: 4px;\n    border-radius: 50%;\n  }\n\n  .e-pv-e-sign-user-dropdown> :first-child {\n    border: none !important;\n  }\n\n  #e-pv-e-sign-toolbar_user_viewer.e-toolbar .e-toolbar-items .e-toolbar-left .e-toolbar-item:first-child {\n    margin-left: 0px !important;\n  }\n</style></div></body></html>","index.js":"{{ripple}}/* jshint esversion: 11 */\nvar currentUser = 'andrew@mycompany.com';\nvar isStatus = false;\nvar isPreventChange = false;\nvar finishedBackground = '#daeaf7ff';\nvar anneBackground = '#eff7ef';\nvar andrewBackground = '#ffefef';\n\n    // Render the PDF viewer control\n    var viewer = new ej.pdfviewer.PdfViewer({\n        documentPath: \"https://cdn.syncfusion.com/content/pdf/eSign_filling.pdf\",\n        resourceUrl: 'https://cdn.syncfusion.com/ej2/23.2.6/dist/ej2-pdfviewer-lib',\n        serviceUrl: 'https://services.syncfusion.com/js/production/api/pdfviewer'\n    });\n    viewer.enableToolbar = false;\n    viewer.enableNavigationToolbar = false;\n    viewer.enableAnnotationToolbar = false;\n    viewer.designerMode = true;\n    viewer.downloadFileName = 'eSign_filling.pdf';\n\n    viewer.appendTo('#pdfViewer');\n    viewer.documentLoad = function () {\n        currentUser = \"andrew@mycompany.com\";\n        viewer.magnification.fitToPage();\n        viewer.designerMode = false;\n        updateUserFormField();\n    };\n    var toolbarObj = new ej.navigations.Toolbar({\n        overflowMode: 'Popup',\n        cssClass: 'template',\n        items: [\n            {\n                type: 'Input',\n                align: 'Left',\n                template:\n                    \"<div id='e-pv-e-sign-user-field' style='width: 200px;'><div class='e-pv-e-sign-user-dropdown' style='width: 200px;'> <input id='userMenu' width='200px'></input></div></div>\",\n            },\n\n            {\n                type: 'Input', align: 'Right', template: \"<div> <button id='e-pv-e-sign-finish-btn'>Finish Signing</button></div>\"\n            },\n        ]\n    });\n    toolbarObj.appendTo('#e-pv-e-sign-toolbar_user_viewer');\n    var userDetails = [\n        {\n            Name: 'Andrew Fuller',\n            Eimg: 'profile2',\n            Mail: 'andrew@mycompany.com',\n            fieldIds: [],\n        },\n        {\n            Name: 'Anne Dodsworth',\n            Eimg: 'profile1',\n            Mail: 'anne@mycompany.com',\n            fieldIds: [],\n        }\n    ];\n    var listObj = new ej.dropdowns.DropDownList({\n        dataSource: userDetails,\n        fields: { text: 'Mail', value: 'Eimg', fieldIds: 'fieldIds' },\n        index: 0,\n        width: '200px',\n        popupWidth: '215px',\n        itemTemplate: function(data) {\n          return '<div style=\"display:flex;\">' +\n                 '<img class=\"e-pv-e-sign-empImage\" style=\"border: 1px solid ' + getBorderColor(data.Mail) + ';\" src=\"styles/images/pdfviewer/employees/' + data.Eimg + '.png\" alt=\"employee\" />' +\n                 '<div>' +\n                 '<div class=\"ename\" style=\"font-size:14px;height:18px;\">' + data.Name + '</div>' +\n                 '<div class=\"mail\" style=\"font-size:12px;\">' + data.Mail + '</div>' +\n                 '</div>' +\n                 '</div>';\n        },\n        valueTemplate: function(data) {\n          return '<div style=\"display:flex;\">' +\n                 '<img class=\"value\" style=\"border: 1px solid ' + getBorderColor(data.Mail) + '; margin: 0px 0px 5px 15px; border-radius:50%;\" src=\"styles/images/pdfviewer/employees/' + data.Eimg + '.png\" height=\"32px\" width=\"32px\" alt=\"employee\" />' +\n                 '<div style=\"margin-top: 3px;\">' +\n                 '<div class=\"name\" style=\"font-size:12px;margin-left: 12px;\">' + data.Name + '</div>' +\n                 '<div class=\"mail\" style=\"font-size:8px;margin-left: 12px;\">' + data.Mail + '</div>' +\n                 '</div>' +\n                 '</div>';\n        }\n    });\n    listObj.appendTo(\"#userMenu\");\n\n    function getBorderColor(email) {\n        return email === 'andrew@mycompany.com' ? 'red' : 'green';\n    }\n\n    listObj.select = function (args) {\n        currentUser = args.itemData.Mail;\n        updateUserFormField();\n        if (isPreventChange) {\n            args.cancel = true;\n        }\n    };\n\n    var finishBtnObj = new ej.buttons.Button({\n        cssClass: 'e-outline',\n    });\n    finishBtnObj.appendTo('#e-pv-e-sign-finish-btn');\n    finishBtnObj.disabled = true;\n\n    finishBtnObj.element.onclick = function(){\n        for (var formField of viewer.formFieldCollections) {\n            viewer?.formDesignerModule.updateFormField(formField, { backgroundColor: finishedBackground });\n        }\n        viewer.serverActionSettings.download = \"FlattenDownload\";\n        viewer.download();\n        viewer.serverActionSettings.download = \"Download\";\n    };\n\n    viewer.downloadEnd = function (args) {\n        viewer.load(args.downloadDocument, null);\n        finishBtnObj.disabled = true;\n        listObj.enabled = false;\n    };\n\n    var dialogObj = new ej.popups.Dialog({\n        width: '350px',\n        minHeight: '50px',\n        isModal: true,\n        visible: isStatus,\n        buttons: [{ click: dlgButtonClick, buttonModel: { content: 'OK', isPrimary: true } }]\n    });\n    dialogObj.appendTo('#dialog');\n\n    function dlgButtonClick() {\n        isStatus = false;\n        dialogObj.hide();\n    }\n\n    function updateUserFormField() {\n        var otherFormFieldDetails = viewer.formFieldCollections.filter(function(formField) {\n            return formField.customData.author === \"anne\";\n        });\n        var currentFormFieldDetails = viewer.formFieldCollections.filter(function(formField) {\n            return formField.customData.author === \"andrew\";\n        });\n        if (currentUser === 'andrew@mycompany.com') {\n            otherFormFieldDetails.forEach(function(field) {\n                if (field.value !== '') {\n                    var mainFieldUpdateData = {\n                        backgroundColor: finishedBackground,\n                        isReadOnly: true\n                    };\n\n                    viewer.formDesigner.updateFormField(field, mainFieldUpdateData);\n\n                    currentFormFieldDetails.forEach(function(currentField) {\n                        var currentFieldUpdateData = {\n                            backgroundColor: andrewBackground,\n                            isReadOnly: true\n                        };\n\n                        viewer.formDesigner.updateFormField(currentField, currentFieldUpdateData);\n                    });\n                } else {\n                    currentFormFieldDetails.forEach(function(currentField) {\n                        var currentFieldUpdateData = {\n                            backgroundColor: andrewBackground,\n                        };\n\n                        viewer.formDesigner.updateFormField(currentField, currentFieldUpdateData);\n                    });\n                }\n                var otherUserField = document.getElementById(field.id + '_content_html_element');\n                if (otherUserField) {\n                    var currentFormField = viewer.formFieldCollections.find(function(formField) {\n                        return formField.id === field.id;\n                    });\n                    if (currentFormField.type !== 'DropDown' && otherUserField) {\n                        if (!currentFormField.value) {\n                            viewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });\n                        }\n                    } else {\n                        if (currentFormField.value.length !== 0 && otherUserField) {\n                            viewer.formDesignerModule.updateFormField(currentFormField, { visibility: 'hidden' });\n                        }\n                    }\n                }\n            });\n        } else {\n            validation(currentFormFieldDetails);\n            if (!isStatus) {\n                currentFormFieldDetails.forEach(function(field) {\n                    var currentFieldUpdateData = {\n                        backgroundColor: finishedBackground,\n                        isReadOnly: true\n                    };\n                    viewer.formDesigner.updateFormField(field, currentFieldUpdateData);\n\n                    otherFormFieldDetails.forEach(function(otherField) {\n                        var otherFieldUpdateData = {\n                            backgroundColor: anneBackground,\n                            isReadOnly: false\n                        };\n\n                        viewer.formDesigner.updateFormField(otherField, otherFieldUpdateData);\n                    });\n                });\n                otherFormFieldDetails.forEach(function(field) {\n                    viewer.formDesignerModule.updateFormField(field, { visibility: 'visible' });\n                });\n            }\n        }\n    }\n\n    function validation(args) {\n        var errorMessage = \"Required Field(s): \";\n        var forms = args;\n        var flag = false;\n        var allFieldsValid = true;\n        var radioGroupName = \"\";\n    \n        for (var i = 0; i < forms.length; i++) {\n            var text = \"\";\n            if (forms[i].isRequired) {\n                if (forms[i].type.toString() == \"Checkbox\" && forms[i].isChecked == false) {\n                    text = forms[i].name;\n                    allFieldsValid = false;\n                } else if (forms[i].type == \"RadioButton\" && flag == false) {\n                    radioGroupName = forms[i].name;\n                    if (forms[i].isSelected == true)\n                        flag = true;\n                } else if (forms[i].type.toString() != \"Checkbox\" && forms[i].type != \"RadioButton\" && (forms[i].value === \"\" || ((typeof args.newValue === 'string') && args.newValue === \"\"))) {\n                    text = forms[i].name;\n                    allFieldsValid = false;\n                } else if (forms[i].type.toString() == \"DropdownList\" && forms[i].value.length == 0) {\n                    text = forms[i].name;\n                    allFieldsValid = false;\n                }\n                if (text != \"\") {\n                    if (errorMessage == \"Required Field(s): \") {\n                        errorMessage += text;\n                    } else {\n                        errorMessage += \", \" + text;\n                    }\n                }\n            }\n        }\n        if (!flag && radioGroupName != \"\") {\n            if (errorMessage == \"Required Field(s): \")\n                errorMessage += radioGroupName;\n            else\n                errorMessage += \", \" + radioGroupName;\n            allFieldsValid = false;\n        }\n        if (errorMessage != \"Required Field(s): \") {\n            isStatus = true;\n            dialogObj.content = errorMessage;\n            dialogObj.show();\n            isPreventChange = true;\n        } else {\n            isStatus = false;\n            isPreventChange = false;\n        }\n    }\n    \n    viewer.formFieldPropertiesChange = function (args) {\n        var errorMessage = \"Required Field(s): \";\n        var forms = viewer.formFieldCollections;\n        var flag = false;\n        var allFieldsValid = true;\n        var radioGroupName = \"\";\n    \n        for (var i = 0; i < forms.length; i++) {\n            var text = \"\";\n            if (forms[i].isRequired) {\n                if (forms[i].type.toString() == \"Checkbox\" && forms[i].isChecked == false) {\n                    text = forms[i].name;\n                    allFieldsValid = false;\n                } else if (forms[i].type == \"RadioButton\" && flag == false) {\n                    radioGroupName = forms[i].name;\n                    if (forms[i].isSelected == true)\n                        flag = true;\n                } else if (forms[i].type.toString() != \"Checkbox\" && forms[i].type != \"RadioButton\" && (forms[i].value === \"\" || ((typeof args.newValue === 'string') && args.newValue === \"\"))) {\n                    text = forms[i].name;\n                    allFieldsValid = false;\n                } else if (forms[i].type.toString() == \"DropdownList\" && forms[i].value.length == 0) {\n                    text = forms[i].name;\n                    allFieldsValid = false;\n                }\n                if (text != \"\") {\n                    if (errorMessage == \"Required Field(s): \") {\n                        errorMessage += text;\n                    } else {\n                        errorMessage += \", \" + text;\n                    }\n                }\n            }\n        }\n        if (!flag && radioGroupName != \"\") {\n            if (errorMessage == \"Required Field(s): \")\n                errorMessage += radioGroupName;\n            else\n                errorMessage += \", \" + radioGroupName;\n            allFieldsValid = false;\n        }\n        finishBtnObj.disabled = !allFieldsValid;\n    };    \n"}